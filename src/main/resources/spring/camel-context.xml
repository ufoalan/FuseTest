<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="        http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd        http://camel.apache.org/schema/spring       https://camel.apache.org/schema/spring/camel-spring-2.23.3.xsd">
    <bean id="analyzer" class="org.mycompany.SentimentAnalysisProcessor"/>
    <bean id="saAggregationStrategy" class="org.mycompany.SAAggregationStrategy"/>
    <camelContext id="camel" xmlns="http://camel.apache.org/schema/spring">
<!--
        <route id="simple-route">
            <from id="route-timer" uri="timer://foo?period=1000"/>
            <setBody id="route-setBody">
                <simple>Hello World 5 from camel-context.xml</simple>
            </setBody>
            <log id="route-log" message=">>> ${body}"/>
            <to id="mqtt-send" uri="mqtt:mqtt1?host=tcp://broker.emqx.io:1883&amp;publishTopicName=camel/mqtt/test"/>
        </route>
        <route id="route-timer">
            <from uri="timer://foo?period=10000"/>
            <to uri="direct:twitter-queue"/>
        </route>
-->        
        <route id="from-twitter">
<!--
            <from uri="direct:twitter-queue"/>
            <to uri="twitter-search:redhat?count=100&amp;consumerKey={{twitter.key}}&amp;consumerSecret={{twitter.secret}}&amp;accessToken={{twitter.accessToken}}&amp;accessTokenSecret={{twitter.accessSecret}}"/>
            <from uri="twitter-search:redhat?count=100&amp;type=polling&amp;delay=30&amp;consumerKey={{twitter.key}}&amp;consumerSecret={{twitter.secret}}&amp;accessToken={{twitter.accessToken}}&amp;accessTokenSecret={{twitter.accessSecret}}"/>
            <from uri="twitter-streaming:FILTER?keywords=Redhat&amp;count=100&amp;consumerKey={{twitter.key}}&amp;consumerSecret={{twitter.secret}}&amp;accessToken={{twitter.accessToken}}&amp;accessTokenSecret={{twitter.accessSecret}}"/>
-->
            <from uri="twitter-search:redhat?count=100&amp;consumerKey={{twitter.key}}&amp;consumerSecret={{twitter.secret}}&amp;accessToken={{twitter.accessToken}}&amp;accessTokenSecret={{twitter.accessSecret}}"/>
            <log message=">>> ${body.text}"/>
            <log message=">>> ${body}"/>
            <log message=">>> ${body.geoLocation}"/>
            <log message=">>> ${body.retweetCount}"/>
            <log message=">>> ${body.favoriteCount}"/>
            <log message=">>> ${body.user.name}"/>
            <log message=">>> ${body.user.location}"/>
            <log message=">>> ${body.user.favouritesCount}"/>
<!--
            <setBody>
                <simple>${body.text}</simple>
            </setBody>
-->
<!--
            <to uri="direct:sentiment"/>
-->
            <to uri="direct:enrichQueue"/>
        </route>
        <route id="enrichRoute">
            <from uri="direct:enrichQueue"/>
            <log message="Before enrich >>> ${body}"/>
            <enrich strategyRef="saAggregationStrategy">
                <constant>direct:sentiment</constant>
            </enrich>
            <!-- It's important to marshal the object into json before sending to queue. Or else it won't work -->
            <marshal>
                <json library="Jackson"/>
            </marshal>
            <log message="After enrich >>> ${body}"/>
            <to uri="mqtt:fool?host=tcp://broker.emqx.io:1883&amp;publishTopicName=camel/mqtt/sentiment"/>
        </route>
        <route id="sentimentAnalysis">
            <from uri="direct:sentiment"/>
            <pipeline>
                <to uri="log:Received ${body}"/>
                <setBody>
                    <simple>${body.text}</simple>
                </setBody>
                <to uri="bean:analyzer"/>
<!--
                <marshal>
                    <json library="Jackson"/>
                </marshal>    
                <to uri="mqtt:fool?host=tcp://broker.emqx.io:1883&amp;publishTopicName=camel/mqtt/sentiment"/>
-->
                <log message="${body}"/>
            </pipeline>
        </route>
<!--
        <route id="from-file">
            <from uri="file:/tmp?fileName=book.json"/>
            <to uri="file:/tmp?fileName=output.json"/>
            <to uri="mqtt:mqtt1?host=tcp://broker.emqx.io:1883&amp;publishTopicName=camel/mqtt/test"/>
        </route>
        <route id="mqtt-route">
            <from id="mqtt-in" uri="mqtt:foo?host=tcp://broker.emqx.io:1883&amp;subscribeTopicNames=camel/mqtt/test"/>
            <choice>
                <when>
                    <jsonpath>$.book[?(@.price &lt; 10)]</jsonpath>
                    <to uri="direct:cheap"/>
                </when>
                <when>
                    <jsonpath>$.book[?(@.price &lt; 30)]</jsonpath>
                        <to uri="direct:average"/>
                </when>
                <otherwise>
                    <to uri="direct:expensive"/>
                </otherwise>
            </choice>
            <unmarshal>
                <json library="Gson" unmarshalTypeName="org.mycompany.MyData"/>
            </unmarshal>
            <log message="Received book: ${body.book[0].title} by ${body.book[0].price}"/>
        </route>
        <route id="cheap-route">
            <from uri="direct:cheap"/>
            <convertBodyTo type="String"/>
            <log message="it's cheap ${body}"/>
        </route>
        <route id="average-route">
            <from uri="direct:average"/>
            <convertBodyTo type="String"/>
            <log message="it's average ${body}"/>
        </route>
        <route id="expensive-route">
            <from uri="direct:expensive"/>
            <convertBodyTo type="String"/>
            <log message="it's expensive ${body}"/>
        </route>
-->
    </camelContext>
</beans>
